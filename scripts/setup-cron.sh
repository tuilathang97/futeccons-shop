#!/bin/bash

# Typesense Cron Setup Script - Enterprise Grade
# Sets up cron job to sync PostgreSQL data to Typesense every minute
# Author: Generated by Claude Code
# Version: 2.0.0

set -euo pipefail

# Configuration
PROJECT_ROOT="/root/data/futeccons-shop"
SCRIPT_PATH="$PROJECT_ROOT/src/script/seed.ts"
LOG_DIR="/var/log"
LOG_FILE="$LOG_DIR/typesense-sync.log"
LOCK_FILE="/tmp/typesense-sync.lock"
NODE_BIN="/root/.nvm/versions/node/v22.12.0/bin"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${GREEN}[$timestamp] [$level]${NC} $message"
}

# Error handling
error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Check if running as root or with sudo
check_permissions() {
    if [[ $EUID -ne 0 ]] && [[ -z "${SUDO_USER:-}" ]]; then
        error_exit "This script requires root privileges. Please run with sudo."
    fi
}

# Validate prerequisites
validate_prerequisites() {
    log "INFO" "Validating prerequisites..."
    
    # Check if project directory exists
    if [[ ! -d "$PROJECT_ROOT" ]]; then
        error_exit "Project directory does not exist: $PROJECT_ROOT"
    fi
    
    # Check if script file exists
    if [[ ! -f "$SCRIPT_PATH" ]]; then
        error_exit "Seed script does not exist: $SCRIPT_PATH"
    fi
    
    # Check if Node.js is available
    if [[ ! -x "$NODE_BIN/node" ]]; then
        error_exit "Node.js not found at: $NODE_BIN/node"
    fi
    
    # Check if npx is available
    if [[ ! -x "$NODE_BIN/npx" ]]; then
        error_exit "npx not found at: $NODE_BIN/npx"
    fi
    
    # Check if log directory exists and is writable
    if [[ ! -d "$LOG_DIR" ]]; then
        log "INFO" "Creating log directory..."
        mkdir -p "$LOG_DIR"
        chmod 755 "$LOG_DIR"
    fi
    
    if [[ ! -w "$LOG_DIR" ]]; then
        error_exit "Log directory is not writable: $LOG_DIR"
    fi
    
    # Create log file if it doesn't exist
    if [[ ! -f "$LOG_FILE" ]]; then
        log "INFO" "Creating log file..."
        touch "$LOG_FILE"
        chmod 666 "$LOG_FILE"
    fi
    
    log "INFO" "Prerequisites validated successfully"
}

# Create sync wrapper script
create_sync_script() {
    local wrapper_script="$PROJECT_ROOT/scripts/sync-wrapper.sh"
    
    log "INFO" "Creating sync wrapper script..."
    
    cat > "$wrapper_script" << 'EOF'
#!/bin/bash

# Typesense Sync Wrapper Script
# Handles locking, logging, and error handling for the actual sync process

set -euo pipefail

PROJECT_ROOT="/root/data/futeccons-shop"
SCRIPT_PATH="$PROJECT_ROOT/src/script/seed.ts"
LOG_FILE="/var/log/typesense-sync.log"
LOCK_FILE="/tmp/typesense-sync.lock"
NODE_BIN="/root/.nvm/versions/node/v22.12.0/bin"
MAX_RETRIES=3
RETRY_DELAY=5

# Set PATH to include Node.js for cron environment
export PATH="$NODE_BIN:$PATH"

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Cleanup function
cleanup() {
    if [[ -f "$LOCK_FILE" ]]; then
        rm -f "$LOCK_FILE"
    fi
}

# Signal handlers
trap cleanup EXIT
trap 'log "ERROR" "Script interrupted by signal"; exit 1' INT TERM

# Check if script is already running
if [[ -f "$LOCK_FILE" ]]; then
    pid=$(cat "$LOCK_FILE")
    if kill -0 "$pid" 2>/dev/null; then
        log "WARN" "Sync process already running with PID: $pid"
        exit 0
    else
        log "WARN" "Stale lock file found, removing"
        rm -f "$LOCK_FILE"
    fi
fi

# Create lock file
echo $$ > "$LOCK_FILE"

# Sync function with retry logic
attempt=1
start_time=$(date +%s)

while [[ $attempt -le $MAX_RETRIES ]]; do
    log "INFO" "Starting sync attempt $attempt/$MAX_RETRIES"
    
    if cd "$PROJECT_ROOT" && "$NODE_BIN/npx" tsx "$SCRIPT_PATH" >> "$LOG_FILE" 2>&1; then
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        log "INFO" "Sync completed successfully in ${duration}s"
        exit 0
    else
        exit_code=$?
        log "ERROR" "Sync failed with exit code: $exit_code (attempt $attempt/$MAX_RETRIES)"
        
        if [[ $attempt -eq $MAX_RETRIES ]]; then
            log "ERROR" "Max retries reached. Sync failed permanently."
            exit 1
        fi
        
        log "INFO" "Retrying in ${RETRY_DELAY}s..."
        sleep $RETRY_DELAY
        ((attempt++))
    fi
done
EOF

    chmod +x "$wrapper_script"
    log "INFO" "Sync wrapper script created: $wrapper_script"
}

# Setup cron job
setup_cron() {
    log "INFO" "Setting up cron job..."
    
    local wrapper_script="$PROJECT_ROOT/scripts/sync-wrapper.sh"
    local cron_entry="* * * * * $wrapper_script"
    
    # Check if cron job already exists
    if crontab -l 2>/dev/null | grep -q "sync-wrapper.sh\|typesense.*seed.ts"; then
        log "WARN" "Existing Typesense cron job found. Removing..."
        crontab -l 2>/dev/null | grep -v "sync-wrapper.sh\|typesense.*seed.ts" | crontab -
    fi
    
    # Add new cron job
    (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
    
    log "INFO" "Cron job created successfully"
    log "INFO" "Schedule: Every minute (* * * * *)"
    log "INFO" "Wrapper: $wrapper_script"
    log "INFO" "Log: $LOG_FILE"
}

# Display current cron jobs
show_cron_status() {
    log "INFO" "Current cron jobs:"
    crontab -l 2>/dev/null | grep -E "(typesense|sync)" || log "INFO" "No Typesense-related cron jobs found"
}

# Main function
main() {
    log "INFO" "============================================"
    log "INFO" "Typesense Cron Setup - Enterprise Grade"
    log "INFO" "============================================"
    
    check_permissions
    validate_prerequisites
    create_sync_script
    setup_cron
    show_cron_status
    
    log "INFO" "============================================"
    log "INFO" "Setup completed successfully!"
    log "INFO" "============================================"
    
    echo -e "${GREEN}Cron job đã được thiết lập - chạy mỗi phút${NC}"
    echo -e "${GREEN}Next steps:${NC}"
    echo "1. Monitor logs: tail -f $LOG_FILE"
    echo "2. Test manually: $PROJECT_ROOT/scripts/sync-wrapper.sh"
    echo "3. Check cron status: crontab -l"
    echo "4. Remove cron job: pnpm run crontab-typesense-remove"
}

# Run main function
main "$@"